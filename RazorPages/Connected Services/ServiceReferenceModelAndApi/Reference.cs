//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ServiceReferenceModelAndApi
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReferenceModelAndApi.IMedia")]
    public interface IMedia
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMedia/SaveMedia", ReplyAction="http://tempuri.org/IMedia/SaveMediaResponse")]
        System.Threading.Tasks.Task SaveMediaAsync(string path, string events, string persons, string peisaj, string locatie, string altele, System.DateTime creationDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMedia/DeleteMedia", ReplyAction="http://tempuri.org/IMedia/DeleteMediaResponse")]
        System.Threading.Tasks.Task DeleteMediaAsync(string path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMedia/ShowGridData", ReplyAction="http://tempuri.org/IMedia/ShowGridDataResponse")]
        System.Threading.Tasks.Task<object> ShowGridDataAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMedia/ShowData", ReplyAction="http://tempuri.org/IMedia/ShowDataResponse")]
        System.Threading.Tasks.Task<object> ShowDataAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMedia/SaveFile", ReplyAction="http://tempuri.org/IMedia/SaveFileResponse")]
        System.Threading.Tasks.Task<string> SaveFileAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMedia/EditData", ReplyAction="http://tempuri.org/IMedia/EditDataResponse")]
        System.Threading.Tasks.Task EditDataAsync(string pathForEdit, string editEvent, string editPerson, string editPeisaj, string editLoc, string editAltele);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMedia/FindData", ReplyAction="http://tempuri.org/IMedia/FindDataResponse")]
        System.Threading.Tasks.Task<string> FindDataAsync(string result, string editEvent, string editPerson, string editPeisaj, string editLoc, string editAltele);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public interface IMediaChannel : ServiceReferenceModelAndApi.IMedia, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public partial class MediaClient : System.ServiceModel.ClientBase<ServiceReferenceModelAndApi.IMedia>, ServiceReferenceModelAndApi.IMedia
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public MediaClient() : 
                base(MediaClient.GetDefaultBinding(), MediaClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_IMedia.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public MediaClient(EndpointConfiguration endpointConfiguration) : 
                base(MediaClient.GetBindingForEndpoint(endpointConfiguration), MediaClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public MediaClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(MediaClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public MediaClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(MediaClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public MediaClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task SaveMediaAsync(string path, string events, string persons, string peisaj, string locatie, string altele, System.DateTime creationDate)
        {
            return base.Channel.SaveMediaAsync(path, events, persons, peisaj, locatie, altele, creationDate);
        }
        
        public System.Threading.Tasks.Task DeleteMediaAsync(string path)
        {
            return base.Channel.DeleteMediaAsync(path);
        }
        
        public System.Threading.Tasks.Task<object> ShowGridDataAsync()
        {
            return base.Channel.ShowGridDataAsync();
        }
        
        public System.Threading.Tasks.Task<object> ShowDataAsync()
        {
            return base.Channel.ShowDataAsync();
        }
        
        public System.Threading.Tasks.Task<string> SaveFileAsync()
        {
            return base.Channel.SaveFileAsync();
        }
        
        public System.Threading.Tasks.Task EditDataAsync(string pathForEdit, string editEvent, string editPerson, string editPeisaj, string editLoc, string editAltele)
        {
            return base.Channel.EditDataAsync(pathForEdit, editEvent, editPerson, editPeisaj, editLoc, editAltele);
        }
        
        public System.Threading.Tasks.Task<string> FindDataAsync(string result, string editEvent, string editPerson, string editPeisaj, string editLoc, string editAltele)
        {
            return base.Channel.FindDataAsync(result, editEvent, editPerson, editPeisaj, editLoc, editAltele);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IMedia))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IMedia))
            {
                return new System.ServiceModel.EndpointAddress("http://localhost:8000/PC");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return MediaClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IMedia);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return MediaClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IMedia);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_IMedia,
        }
    }
}
